<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
		
<mapper namespace="PlanMapper">

	<resultMap type="plan" id="planSelectMap">
		<result	jdbcType="VARCHAR"		column="plan_id"		property="planId"/>
		<result	jdbcType="VARCHAR"		column="plan_master_id"	property="planMaster.userId"/>
		<result	jdbcType="VARCHAR"		column="plan_title"		property="planTitle"/>
		<result	jdbcType="VARCHAR"		column="plan_img"		property="planImg"/>
		<result	jdbcType="CHAR"			column="plan_type"		property="planType"/>
		<result	jdbcType="TIMESTAMP"	column="plan_reg_date"	property="planRegDate"/>
		<result	jdbcType="TIMESTAMP"	column="start_date"		property="startDate"/>
		<result	jdbcType="VARCHAR"		column="plan_status"	property="planStatus"/>
		
		<result	jdbcType="NUMERIC"		column="plan_total_days"	property="planTotalDays"/>
		<result	jdbcType="NUMERIC"		column="plan_party_size"	property="planPartySize"/>
		
		<collection property="todoList" column="plan_id" javaType="java.util.ArrayList" ofType="todo"/>
	</resultMap>
	
	<resultMap type="todo" id="todoSelectMap">
		<result	jdbcType="VARCHAR"		column="plan_id"		property="planId"/>
		<result	jdbcType="VARCHAR"		column="todo_id"		property="todoId"/>
		<result	jdbcType="VARCHAR"		column="todo_name"		property="todoName"/>
		<result	jdbcType="CHAR"			column="todo_check"		property="todoCheck"/>
	</resultMap>
	
	<resultMap type="party" id="partySelectMap">
		<result	jdbcType="VARCHAR"		column="party_id"		property="partyId"/>
		<result	jdbcType="VARCHAR"		column="party_user_id"	property="partyUserId"/>
		<result	jdbcType="CHAR"			column="party_type"		property="partyType"/>
		<result	jdbcType="VARCHAR"		column="ref_id"			property="refId"/>
		<result	jdbcType="CHAR"			column="party_role"		property="partyRole"/>
		
		<result	jdbcType="VARCHAR"		column="party_user_nickname"		property="partyUserNickname"/>
	</resultMap>
	
	
	<resultMap id="userSelectMap" type="user">
		<result property="userId"		column="user_id"		jdbcType="VARCHAR"/>
		<result property="userName"		column="user_name"		jdbcType="VARCHAR"/>
		<result property="nickname"		column="nickname"		jdbcType="VARCHAR"/>
		<result property="pwd"			column="pwd"			jdbcType="VARCHAR"/>
		<result property="role"			column="role"			jdbcType="CHAR"/>
		<result property="email"		column="email"			jdbcType="VARCHAR"/>
		<result property="phone"		column="phone"			jdbcType="VARCHAR"/>
		<result property="userImg"		column="user_img"		jdbcType="VARCHAR"/>
		<result property="sex"			column="sex"			jdbcType="CHAR"/>
		<result property="birth"		column="birth"			jdbcType="VARCHAR"/>
		<result property="slot"			column="slot"			jdbcType="NUMERIC"/>
		<result property="totalPoint"	column="total_point"	jdbcType="NUMERIC"/>
		<result property="pushAgree"	column="push_agree"		jdbcType="CHAR"/>
		<result property="regDate"		column="reg_date"		jdbcType="TIMESTAMP"/>
		<result property="unRegDate"	column="unreg_date"		jdbcType="TIMESTAMP"/>
	</resultMap>
	



	
	<insert id="addPlan"	parameterType="plan">
		INSERT 
		INTO plan ( plan_id, plan_master_id, plan_title, plan_img, 	
						plan_type, plan_reg_date, start_date, plan_status, deleted )
		VALUES ( TO_CHAR(seq_plan_plan_id.NEXTVAL), #{planMaster.userId}, #{planTitle:VARCHAR}, #{planImg:VARCHAR}, 
						#{planType}, SYSDATE, TO_DATE( #{startDateString:VARCHAR} , 'yyyymmdd'), 'R', 'F' )
	</insert>
	
	<select id="getPlan"	parameterType="string"	resultMap="planSelectMap">
		SELECT 	p.plan_id, p.plan_title, p.plan_img, p.plan_type, p.start_date, p.plan_status, (cr.sum - (cr.cnt-1)) plan_total_days, pt.plan_party_size 
		FROM 	plan p, 
				( SELECT SUM(city_duration) sum, COUNT(*) cnt FROM city_route WHERE plan_id = #{planId} ) cr,
				( SELECT COUNT(*) plan_party_size FROM party WHERE party_type = 'P' AND ref_id = #{planId} ) pt 
		WHERE 	p.plan_id = #{planId}
	</select>

	<select id="getPlanList"	parameterType="string"	resultMap="planSelectMap">
		SELECT 	p.plan_id, p.plan_title, p.plan_img, p.plan_type, p.start_date, p.plan_status, NVL((cr.sum - (cr.cnt-1)), 0) plan_total_days, pt.plan_party_size 
		FROM 	plan p, 
				( SELECT SUM(city_duration) sum, COUNT(*) cnt, plan_id FROM city_route GROUP BY plan_id ) cr, 
				( SELECT ref_id, COUNT(*) plan_party_size FROM party WHERE party_type = 'P' GROUP BY ref_id ) pt 
		WHERE 	p.plan_id = cr.plan_id(+) AND pt.ref_id = p.plan_id AND p.deleted = 'F' 
			AND p.plan_id IN ( SELECT ref_id FROM party WHERE party_user_id = #{userId} AND party_type = 'P' ) 
		ORDER BY 	p.plan_id
	</select>
	
	<update id="updatePlan"	parameterType="plan">
		UPDATE 	plan 
		<set>
			plan_title = #{planTitle}, 
			plan_img = #{planImg}, 
			plan_type = #{planType}, 
			start_date = TO_DATE( #{startDateString} , 'yyyymmdd')
		</set>
		WHERE 	plan_id = #{planId}
	</update>
	
	<update id="updatePlanStatus"	parameterType="plan">
		UPDATE 	plan 
		SET 	plan_status = #{planStatus} 
		WHERE 	plan_id = #{planId}
	</update>
	
	<update id="deletePlan"	parameterType="string">
		UPDATE 	plan 
		SET 	deleted = 'T' 
		WHERE 	plan_id = #{planId}
	</update>
	
	
	
	
	
	<!-- 		Offer 관련 SQL		 -->
	<insert id="addOffer"	parameterType="offer">
		INSERT 
		INTO 	offer ( offer_id, offer_type, ref_id, offer_msg, offer_status, from_user_id, to_user_id, offer_date ) 
		VALUES 		( TO_CHAR(seq_offer_offer_id.NEXTVAL), 'P', #{refId}, #{offerMsg}, 'S', #{fromUserId}, #{toUserId}, SYSDATE )
	</insert>
	
	
	
	
	
	<!-- 		Party 관련 SQL		 -->
	
	<insert id="addPlanPartyKing" parameterType="string">
		INSERT 
		INTO party ( party_id, party_user_id, party_type, ref_id, party_role ) 
		VALUES ( TO_CHAR(seq_party_party_id.NEXTVAL), #{partyUserId}, 'P', TO_CHAR(seq_plan_plan_id.CURRVAL), 'K' )
	</insert>
	
	<delete id="deletePlanParty"	parameterType="party">
		DELETE 
		FROM 	party 
		WHERE 	ref_id = #{refId} 
		AND 	party_user_id = #{partyUserId}
	</delete>
	
	<!-- user mapper 필요? -->
	<select id="getPlanPartyList"	parameterType="string"	resultMap="userSelectMap">
		SELECT 	u.user_id, u.nickname, u.user_img, u.phone, pt.party_role role
		FROM 	userss u, party pt 
		WHERE 	u.user_id = pt.party_user_id 
			AND pt.ref_id = #{planId} 
			AND pt.party_type = 'P'
	</select>
	
	<!-- 이미 참여중인 회원인지 체크 -->
	<select id="checkUserFromParty"	parameterType="party" resultType="string">
		SELECT 	pt.party_user_id 
		FROM 	party pt 
		WHERE 	pt.party_user_id = #{partyUserId} 
			AND 	party_type = 'P' 
			AND 	ref_id = #{refId}
	</select>
	
	
	
	
	
	<!-- 		Todo 관련 SQL		 -->
	
	<insert id="addTodo"	parameterType="todo">
		INSERT 
		INTO 	todo ( plan_id, todo_id, todo_name, todo_check ) 
		VALUES 		( #{planId}, TO_CHAR(seq_todo_todo_id.nextval), #{todoName}, 'F')
	</insert>
	
	<select id="getTodoList"	parameterType="string"	resultMap="todoSelectMap">
		SELECT 	t.todo_id, t.todo_name, t.todo_check 
		FROM 	todo t 
		WHERE 	t.plan_id = #{planId}
		ORDER BY t.todo_id
	</select>
	
	<update id="checkTodo"	parameterType="todo">
		UPDATE 	todo 
		SET 	todo_check = #{todoCheck} 
		WHERE 	todo_id = #{todoId}
	</update>
	
	<update id="updateTodoName"	parameterType="todo">
		UPDATE 	todo 
		SET 	todo_name = #{todoName} 
		WHERE 	todo_id = #{todoId}
	</update>
	
	<delete id="deleteTodo"	parameterType="string">
		DELETE 
		FROM 	todo 
		WHERE 	todo_id = #{todoId}
	</delete>
	
	<!-- 디폴트 todo 리스트를 추가하기 위한 SQL -->
	<insert id="addDefaultTodos"	parameterType="string">
		INSERT 
		INTO 	todo ( plan_id, todo_id, todo_name, todo_check ) 
		VALUES 		( TO_CHAR(seq_plan_plan_id.CURRVAL), TO_CHAR(seq_todo_todo_id.NEXTVAL), #{todoName}, 'F')
	</insert>
	
	
	
	<!-- 	User Mapper에 가야하는 SQL.... 테스트용으로 여기서 만들어 씀	 -->
	<update id="updateUserSlot"	parameterType="string">
		UPDATE 	userss 
		SET 	slot = slot + 1 
		WHERE 	user_id = #{userId}
	</update>
	
	<select id="findUserId"	parameterType="string" resultType="string">
		SELECT 	user_id 
		FROM 	userss 
		WHERE 	user_id = #{userId}
	</select>
	
	
	<!-- 회원이 마스터/멤버로 참여중인 플래너 중 플랜 상태가 'R'이면서 아직 여행 시작 전인 plan ID 목록 조회 -->
	<select id="getPlanIdList" parameterType="string"	resultMap="planSelectMap">
		SELECT p.plan_id, p.plan_title, p.start_date, count(*)
		FROM plan p, todo t
		WHERE p.deleted = 'F'
			AND p.plan_id = t.plan_id 
			AND t.todo_check = 'F'
			AND p.plan_status = 'R'
			AND p.start_date > SYSDATE
			AND p.plan_id IN ( SELECT ref_id FROM party WHERE party_user_id = #{userId} AND party_type = 'P' )
		GROUP BY p.plan_id, p.plan_title, p.start_date
		ORDER BY p.plan_id
	</select>
	
	<!-- plan_id 로 미완료된 todo 목록 조회 -->
	<select id="getUndoneList" parameterType="string" resultMap="todoSelectMap">
		SELECT  t.plan_id, t.todo_id, t.todo_name, t.todo_check 
		FROM todo t, plan p 
		WHERE t.plan_id = p.plan_id 
			AND t.plan_id = #{planId}
			AND t.todo_check = 'F' 
		ORDER BY t.todo_id
	</select>
	
	<select id="getSoonPlanId" parameterType="integer" resultMap = "planSelectMap">
		SELECT p.plan_id, p.plan_title
		FROM plan p
		WHERE p.deleted = 'F' 
			AND p.plan_status = 'R'
			AND TRUNC(TRUNC(start_date) - SYSDATE) = #{dayLeft}
		ORDER BY p.plan_id
	</select>
	
	<select id="getSoonTodo" parameterType="string" resultMap="todoSelectMap">
		SELECT t.todo_name, t.todo_check
		FROM plan p, todo t
		WHERE p.plan_id = t.plan_id
			AND t.todo_check = 'F'
			AND p.plan_id = #{planId}
	</select>
	
	<select id="getPushPhoneList" parameterType="string" resultMap="userSelectMap">
		SELECT u.phone, u.user_id
		FROM users u, party pt, plan p
		WHERE p.plan_id = pt.ref_id
			AND pt.party_user_id = u.user_id
			AND u.pushAgree = 'T'
			AND p.plan_id = #{planId}
	</select>
	
	<!-- 위의 것이 맞는데.. 내 db랑 안맞아서 테스트용 -->
	<select id="getPushPhoneList2" parameterType="string" resultMap="userSelectMap">
		SELECT u.cell_phone, u.user_id
		FROM users u, party pt, plan p
		WHERE p.plan_id = pt.ref_id
			AND pt.party_user_id = u.user_id
			AND p.plan_id = #{planId}
	</select>
	
	<select id="getUndoneCount" parameterType="string" resultType="integer">
		SELECT count(*)
		FROM plan p, todo t
		WHERE p.deleted = 'F' 
			AND t.plan_id = p.plan_id
			AND t.todo_check = 'F' 
			AND p.plan_status = 'R'
			AND p.start_date > SYSDATE
			AND p.plan_id IN ( SELECT ref_id FROM party WHERE party_user_id = #{userId} AND party_type = 'P' )
	</select>

</mapper>
